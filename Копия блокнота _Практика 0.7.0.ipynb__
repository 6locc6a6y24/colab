{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1594,"status":"ok","timestamp":1730201790182,"user":{"displayName":"Alexandr Sobolev","userId":"06516004584152737867"},"user_tz":-240},"id":"HboMqgQA_jg7","outputId":"1535f041-ac23-466c-f3f8-1f6bff69a0a8"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[31mERROR: Could not find a version that satisfies the requirement urlib (from versions: none)\u001b[0m\u001b[31m\n","\u001b[0m\u001b[31mERROR: No matching distribution found for urlib\u001b[0m\u001b[31m\n","\u001b[0m"]}],"source":[]},{"cell_type":"markdown","metadata":{"id":"ZLVI_WIcuT56"},"source":["ФИО:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3AfG_Tal0P2S"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"JnENzj0WEN3e"},"source":[]},{"cell_type":"markdown","metadata":{"id":"Gtm1UjYgDlY7"},"source":["## Задание 1. HTTP-запросы, ответы и погода"]},{"cell_type":"markdown","metadata":{"id":"FtjnLNIKzfMZ"},"source":["Описание:\n","\n","Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.\n","\n","Можно использовать API: https://open-meteo.com/. Используйте метод GET.\n","\n","\n","Ввод\n","```\n","56.50, 60.35\n","```\n","\n","Вывод\n","```\n","Сегодня (1.11) погода 20 ◦С, нет осадков, туман\n","```\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Mbs40_buVRV","outputId":"8d70ec8e-629b-4f91-d47f-48f7d13c6f55","executionInfo":{"status":"ok","timestamp":1730223707929,"user_tz":-300,"elapsed":3733,"user":{"displayName":"Alexandr Sobolev","userId":"06516004584152737867"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Введите координаты: 56.50, 60.35\n","Сегодня ( 2024-10-29 ) погода  -2.3 C\n"]}],"source":["import requests\n","\n","def qwe(coordinates, time, temp):\n","    url = f\"https://api.open-meteo.com/v1/forecast?latitude={coordinates[0]}&longitude={coordinates[1]}&hourly=temperature_2m\"\n","    response = requests.get(url)\n","    answer = response.json()\n","\n","    for k, v in answer.items():\n","        if k == \"hourly\":\n","            for keys, values in v.items():\n","                if keys == \"time\":\n","                    time = str(values[0])\n","                elif keys == \"temperature_2m\":\n","                    temp = values[0]\n","\n","    print(\"Сегодня (\", time[0:10],\") погода \", temp, \"C\")\n","\n","coordinates = input(\"Введите координаты: \").split(\", \")\n","temperature = \"\"\n","time = \"\"\n","qwe(coordinates, time, temperature)\n"]},{"cell_type":"markdown","metadata":{"id":"FYjU9WmVDoGs"},"source":["## Задание 2. HTTP-запросы, ответы и покемоны"]},{"cell_type":"markdown","metadata":{"id":"oZ1guEbl0PZm"},"source":["**Описание:**\n","\n","\n","Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:\n","\n","1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов\n","\n","2. Извлеките имена покемонов из ответа и выведите их списком\n","\n","3. Введите с помощью input() название одного из покемонов\n","\n","\n","```\n","Имя покемона: clefairy\n","```\n","\n","\n","\n","4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне\n","\n","5. Извлеките и выведите следующие данные о введенном покемоне:\n","\n","     • Имя\n","\n","     • Тип\n","\n","     • Вес\n","\n","     • Рост\n","\n","     • Способности\n","\n","Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JkFmivjp25NL"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"Ci07uZdADue9"},"source":["## Задание 3. HTTP-запросы, ответы и посты"]},{"cell_type":"markdown","metadata":{"id":"h194KTer1-B3"},"source":["**Описание:**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:\n","\n","1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON\n","\n","2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON\n","\n","3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YANQx4o258Zn"},"outputs":[],"source":["import requests\n","\n","def first_task(answer):\n","    for i in answer:\n","        print(i)\n","\n","def second_task(answer, data):\n","    for i in answer:\n","        if i[\"id\"] == data:\n","            print(i)\n","\n","def third_task(answer, data):\n","    for i in answer:\n","        if i[\"id\"] == data:\n","            print(\"title -\", i[\"title\"], \"\\n\", \"body -\", i[\"body\"])\n","\n","url = \"https://jsonplaceholder.typicode.com/posts\"\n","response = requests.get(url)\n","answer = response.json()\n","continued = True\n","while continued == True:\n","    mode = int(input(\"1.Все посты, 2.Посты по id, 3.Только важная информация - \"))\n","    if mode == 1:\n","        first_task(answer)\n","    elif mode == 2:\n","        data = int(input(\"Введите id поста: \"))\n","        second_task(answer, data)\n","    elif mode == 3:\n","        data = int(input(\"Введите id поста: \"))\n","        third_task(answer, data)\n","    else:\n","        continued = False"]},{"cell_type":"markdown","metadata":{"id":"rtwepQvJDy9N"},"source":["## Задание 4. HTTP-запросы, ответы и работа с постами"]},{"cell_type":"markdown","metadata":{"id":"4MjiaxDM58ta"},"source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:\n","\n","1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON\n","\n","\n","```\n","Заголовок: Новый пост\n","Содержимое поста: Тут должно находиться содержимое нового поста...\n","ID пользователя: 10\n","```\n","\n","\n","\n","2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON\n","\n","3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jZUIdwq96DNl"},"outputs":[],"source":["import requests\n","\n","def new_post(user_id, post_title, post_body):\n","    post = {\"userId\":user_id, \"id\": 0, \"title\": post_title, \"body\": post_body}\n","    response = requests.post(\"https://jsonplaceholder.typicode.com/posts\",\n","                             post)\n","    print(response.json())\n","\n","def update_post(user_id, id, post_title, post_body):\n","    new_data = {\"userId\": user_id, \"id\": id, \"title\": post_title, \"body\": post_body}\n","    response = requests.put(f\"https://jsonplaceholder.typicode.com/posts/{id}\",\n","                            new_data)\n","    print(response.status_code)\n","    return response.json()\n","\n","def delete_post(id):\n","    response = requests.delete(f\"https://jsonplaceholder.typicode.com/posts/{id}\")\n","    return response.status_code\n","\n","\n","continued = True\n","while continued == True:\n","    mode = int(input(\"1.Новый пост, 2.Обновить пост, 3.Удалить пост - \"))\n","    if mode == 1:\n","        user_id = int(input(\"Введите id пользователя: \"))\n","        title = input(\"Введите заголовок: \")\n","        body = input(\"Введите содержимое поста: \")\n","        print(new_post(user_id, title, body))\n","    elif mode == 2:\n","        user_id = int(input(\"Введите id пользователя: \"))\n","        id = int(input(\"Введите id поста: \"))\n","        title = input(\"Введите заголовок: \")\n","        body = input(\"Введите содержимое поста: \")\n","        print(update_post(user_id, id, title, body))\n","    elif mode == 3:\n","        id = int(input(\"Введите id поста: \"))\n","        print(delete_post(id))\n","    else:\n","        continued = False"]},{"cell_type":"markdown","metadata":{"id":"0UoRc9vOD3XT"},"source":["## Задание 5. HTTP-запросы, ответы и пёсики"]},{"cell_type":"markdown","metadata":{"id":"y0EyPsFQ6mSZ"},"source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.\n","\n","Этапы:\n","\n","1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка\n","\n","2. Реализуйте возможность ввода нескольких пород собак через запятую\n","\n","\n","```\n","african, chow, dingo\n","```\n","\n","\n","\n","3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого\n","\n","\n","Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5xti3KRP4Kzp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730223742841,"user_tz":-300,"elapsed":21839,"user":{"displayName":"Alexandr Sobolev","userId":"06516004584152737867"}},"outputId":"68178db3-6312-446a-a2a4-e9740abd12ad"},"outputs":[{"name":"stdout","output_type":"stream","text":["1.Вывести все породы собак, 2.Картинка собаки - 2\n","Введите породу собак: pitbull\n","pitbull - https://images.dog.ceo/breeds/pitbull/20190710_143021.jpg\n","1.Вывести все породы собак, 2.Картинка собаки - 0\n"]}],"source":["import requests\n","from random import choice\n","import webbrowser\n","\n","def all_dogs():\n","    response = requests.get(\"https://dog.ceo/api/breeds/list/all\")\n","    answer = response.json()\n","    counter = 1\n","    for k,v in answer.items():\n","        if k == \"message\":\n","            for keys, values in v.items():\n","                print(str(counter)+\".\", keys)\n","                if values != []:\n","                    print(values)\n","                counter += 1\n","\n","def image_of_dogs(breed):\n","    for i in breed:\n","        response = requests.get(f\"https://dog.ceo/api/breed/{i}/images\")\n","        answer = response.json()\n","        for k, v in answer.items():\n","            if k == \"message\":\n","                image_url = choice(v)\n","                print(i,\"-\", image_url)\n","\n","                #открывает эту ссылку в браузере\n","                webbrowser.open(image_url)\n","\n","continued = True\n","while continued == True:\n","    mode = int(input(\"1.Вывести все породы собак, 2.Картинка собаки - \"))\n","    if mode == 1:\n","        all_dogs()\n","    elif mode == 2:\n","        breed = input(\"Введите породу собак: \").split(\", \")\n","        image_of_dogs(breed)\n","    else:\n","        continued = False"]}],"metadata":{"colab":{"provenance":[{"file_id":"1TWCJIAUIWUxbVRj7Jwti1cawJMFFfkUk","timestamp":1732970841812},{"file_id":"1l_GPJjnpKNgfxCGYwBYdhk5eQjOdijks","timestamp":1730200886363}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}