{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732614615067}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО:**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wZMLYG_G_-19"},"outputs":[],"source":["Соболев Александр Олегович"]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["class Employee:\n","    def __init__(self, name, gender, office_hours):\n","        self.name = name\n","        self.gender = gender\n","        self.office_hours = office_hours\n","\n","    def calculate_salary(self):\n","        if self.title == 'Manager' and self.gender == 'm':\n","            self.salary = ((self.salary + (self.office_hours * 1000)) * 1.5) * 1.1\n","        elif self.title == 'Manager' and self.gender == 'f':\n","            self.salary = (self.salary + (self.office_hours * 1000)) * 1.5\n","        elif self.title == 'Developer' and self.gender == 'm':\n","            self.salary = ((self.salary + (self.office_hours * 1000)) * 1.5) * 1.1\n","        elif self.title == 'Developer' and self.gender == 'f':\n","            self.salary = (self.salary + (self.office_hours * 1000)) * 1.5\n","        else:\n","            pass\n","        return f'Зарплата {self.title} - {self.salary}'\n","\n","\n","class Manager(Employee):\n","    title = 'Manager'\n","    salary = 50000\n","\n","    def __init__(self, name, gender, office_hours):\n","        self.title = self.title\n","        self.salary = self.salary\n","        super().__init__(name, gender, office_hours)\n","\n","\n","class Developer(Employee):\n","    title = 'Developer'\n","    salary = 100000\n","\n","    def __init__(self, name, gender, office_hours):\n","        self.title = self.title\n","        self.salary = self.salary\n","        super().__init__(name, gender, office_hours)\n","\n","\n","sam = Manager('Sam', 'm', 30)\n","lucia = Developer('Lucia', 'f', 20)\n","print(lucia.calculate_salary())\n","print(sam.calculate_salary())"],"metadata":{"id":"aexGXzqCAFH7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732619291054,"user_tz":-300,"elapsed":217,"user":{"displayName":"Александр Соболевский","userId":"05585722129785396224"}},"outputId":"29dd1965-87d8-4522-d73a-fa3600060da6"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Зарплата Developer - 180000.0\n","Зарплата Manager - 132000.0\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["class Cars:\n","    def __init__(self, brand, model, kpp, description):\n","        self.brand = brand\n","        self.model = model\n","        self.kpp = kpp\n","        self.description = description\n","\n","    def descriptionn(self):\n","        print(f'Тип машины - {self.type}\\nМарка машины - {self.brand}\\n'\n","        f'Модель - {self.model}\\nКоробка - {self.kpp}\\nОписание - {self.description}')\n","        return '____________'\n","\n","\n","class Passenger(Cars):\n","    type = 'Легковая'\n","\n","    def __init__(self, brand, model, kpp, description):\n","        self.type = self.type\n","        super().__init__(brand, model, kpp, description)\n","\n","\n","class Truck(Cars):\n","    type = 'Грузовая'\n","\n","    def __init__(self, brand, model, kpp, description):\n","        self.type = self.type\n","        super().__init__(brand, model, kpp, description)\n","\n","\n","class Military(Cars):\n","    type = 'Военная машина'\n","\n","    def __init__(self, brand, model, kpp, description):\n","        self.type = self.type\n","        super().__init__(brand, model, kpp, description)\n","\n","\n","rls = Military('КАМАЗ', '39Н7', 'Механика', 'рлс')\n","print(rls.descriptionn())\n","auto = Passenger('Рено', 'Флюенс', 'Механика', 'Легковушка')\n","print(auto.descriptionn())\n","truck = Truck('Газель', 'Обыкновенная', 'Автомат', 'Маршрутка')\n","print(truck.descriptionn())\n","\n","\n",""],"metadata":{"id":"WOFOZQmDBKf4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732619111213,"user_tz":-300,"elapsed":238,"user":{"displayName":"Александр Соболевский","userId":"05585722129785396224"}},"outputId":"e1ebc8ef-6ebb-4173-fe95-b0c1f7d807b1"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Тип машины - Военная машина\n","Марка машины - КАМАЗ\n","Модель - 39Н7\n","Коробка - Механика\n","Описание - рлс\n","____________\n","Тип машины - Легковая\n","Марка машины - Рено\n","Модель - Флюенс\n","Коробка - Механика\n","Описание - Легковушка\n","____________\n","Тип машины - Грузовая\n","Марка машины - Газель\n","Модель - Обыкновенная\n","Коробка - Автомат\n","Описание - Маршрутка\n","____________\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":["class Product:\n","    in_stock = True\n","\n","    def __init__(self, cost, category):\n","        self.in_stock = self.in_stock\n","        self.cost = cost\n","        self.category = category\n","\n","\n","class ShoppingCart(Product):\n","    orders = []\n","\n","    def __init__(self):\n","        self.orders = self.orders\n","\n","\n","    def add_to_cart(self, product_name, quantity):\n","        self.order = [product_name, quantity]\n","        orders.extend(self.order)\n","\n","class Customer(ShoppingCart):\n","    order_list = []\n","\n","    def __init__(self, name):\n","        self.order_list = self.order_list\n","        self.name = name\n","\n","\n","\n"],"metadata":{"id":"wkCcv_K-Bwdv","colab":{"base_uri":"https://localhost:8080/","height":110},"executionInfo":{"status":"error","timestamp":1732620190542,"user_tz":-300,"elapsed":237,"user":{"displayName":"Александр Соболевский","userId":"05585722129785396224"}},"outputId":"2955f882-f17a-4981-9f4a-175331d2ef25"},"execution_count":34,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"incomplete input (<ipython-input-34-410276efcd12>, line 18)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-34-410276efcd12>\"\u001b[0;36m, line \u001b[0;32m18\u001b[0m\n\u001b[0;31m    class ShoppingCart(Customer):\u001b[0m\n\u001b[0m                                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m incomplete input\n"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":["\n"],"metadata":{"id":"4NyrOOy8B9ED"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":[],"metadata":{"id":"x9OxpNsyCcUo"},"execution_count":null,"outputs":[]}]}