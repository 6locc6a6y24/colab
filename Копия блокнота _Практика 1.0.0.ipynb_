{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1732010360329}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:  Соболев Александр Олегович ( зачтено 19 11 2024)"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["# Задание (совместное с преподавателем)\n","\n","\n"],"metadata":{"id":"-CSHUbWzCqeM"}},{"cell_type":"markdown","source":["Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.\n","Для этого создайте класс Employee со следующими методами:\n","\n","- Метод consume_vacation должен отвечать за списание дней отпуска.\n","\n","Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).\n","\n","При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.\n","\n","Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра remaining_vacation_days, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.\n","\n","- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```\n","\n","\n","Чтобы проверить работу программы:\n","1. Создайте экземпляр класса Employee.\n","2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.\n","3. Вызовите метод get_vacation_details."],"metadata":{"id":"a_flBjZOCwYz"}},{"cell_type":"code","source":["class Employee:\n","    vacation_days = 28\n","    def __init__(self, first_name, last_name, gender):\n","        self.first_name = first_name\n","        self.last_name = last_name\n","        self.gender = gender\n","        self.remaining_vacation_days = self.vacation_days\n","\n","\n","    def consume_vacation(self, days):\n","        self.remaining_vacation_days -= days\n","\n","\n","    def get_vacation_details(self):\n","        return f'Остаток отпускных дней: {self.remaining_vacation_days}'\n","\n","\n","employee = Employee('Демид', 'Barbos', 'm')\n","employee.consume_vacation(7)\n","print(employee.get_vacation_details())"],"metadata":{"id":"G4bUraN4CwBI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732011141314,"user_tz":-300,"elapsed":4,"user":{"displayName":"Alexandr Sobolev","userId":"06516004584152737867"}},"outputId":"e13d38c4-1aff-4b09-8063-d65531b80964"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Остаток отпускных дней: 23\n"]}]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"8XGka5GtEBK1"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["class Rectangle:\n","    def __init__(self, height, width):\n","        self.height = height\n","        self.width = width\n","\n","    def find_area(self):\n","        return f'Площадь: {self.height * self.width}'\n","\n","    def find_perimeter(self):\n","        return f'Периметр: {2 * (self.width + self.height)}'\n","\n","    def show_width_height(self):\n","        return f'Ширина: {self.width}  Высота: {self.height}'\n","\n","\n","rectangle = Rectangle(height = 30, width = 10)\n","print(rectangle.find_area())\n","print(rectangle.find_perimeter())\n","print(rectangle.show_width_height())"],"metadata":{"id":"dG6uNPqTEAvt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732015614919,"user_tz":-300,"elapsed":317,"user":{"displayName":"Alexandr Sobolev","userId":"06516004584152737867"}},"outputId":"2324092f-df9e-4e1f-b470-54bf174b93f0"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["Площадь: 300\n","Периметр: 80\n","Ширина: 10  Высота: 30\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccountco:\n","\n","    balance = 0\n","\n","    def __init__(self, account_holder):\n","        self.account_holder = account_holder\n","        self.balance = self.balance\n","\n","\n","    def deposit(self, amount):\n","        self.balance += amount\n","\n","\n","    def withdraw(self, amount):\n","        if self.balance - amount >= 0:\n","            self.balance -= amount\n","            print(self.balance())\n","        else:\n","            print('Недостаточно средств')\n","\n","\n","    def get_balance(self):\n","        return f'Ваш баланс: {self.balance}'\n","\n","\n","account = BankAccountco('Шарик Барбосов')\n","account.deposit(1000000)\n","account.withdraw(100000000000)\n","print(account.get_balance())\n"],"metadata":{"id":"WWXNIUrCE99W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732012199196,"user_tz":-300,"elapsed":284,"user":{"displayName":"Alexandr Sobolev","userId":"06516004584152737867"}},"outputId":"4fd535b8-c19e-4568-df90-5954ab22f15c"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Недостаточно средств\n","Ваш баланс: 1000000\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":["from random import randint as rnd\n","from time import sleep\n","\n","class Hero:\n","    health = 100\n","    armor = 100\n","    damage = 10\n","    weapon = 'Меч'\n","    def __init__(self, name):\n","        self.health = self.health\n","        self.armor = self.armor\n","        self.weapon = self.weapon\n","        self.name = name\n","        self.damage = self.damage\n","\n","    def atack_head(self):\n","\n","        self.dmg = rnd(0, self.damage+5)  #+5 потому, что по голове крит прокает\n","        return self.dmg\n","\n","    def atack_stomach(self):\n","        self.dmg = rnd(0, self.damage)\n","        return self.dmg\n","\n","\n","class Dragon:\n","    health = 100\n","    damage = 10\n","    def __init__(self, name):\n","        self.health = self.health\n","        self.name = name\n","\n","    def atack(self):\n","        self.dmg = rnd(0, self.damage)\n","        return self.dmg\n","\n","\n","hero = Hero('Добрыня')\n","dragon = Dragon('Горыныч')\n","while hero.health > 0:\n","    choice = str(input('Ударить по голове или в живот?'))\n","    if choice == 'по голове':\n","        damage = hero.atack_head()\n","        dragon.health -= damage\n","        print(f'Вы нанесли {damage} урона')\n","        if dragon.health <= 0:\n","            print('Дракон побежден')\n","            break\n","    elif choice == 'в живот':\n","        damage = hero.atack_stomach()\n","        dragon.health -= damage\n","        print(f'Вы нанесли {damage} урона')\n","        if dragon.health <= 0:\n","            print('Дракон побежден')\n","            break\n","    else:\n","        print('нет такого удара')\n","    sleep(2)\n","    dragon_damage = dragon.atack()\n","    if hero.armor > 0:\n","        hero.armor -= dragon_damage\n","        print(f'Дракон нанес вам {dragon_damage} урона')\n","    else:\n","        hero.health -= dragon_damage\n","        print(f'Дракон нанес вам {dragon_damage} урона')\n","    sleep(2)\n","    print('______')\n","    print(f'Броня - {hero.armor}, Здоровье - {hero.health}')\n","    print(f'Здоровье дракона - {dragon.health}')\n","    print('______')\n","    sleep(1)\n","\n","\n","\n"],"metadata":{"id":"Oz9BZbhAFwua","colab":{"base_uri":"https://localhost:8080/","height":499},"executionInfo":{"status":"error","timestamp":1732014129916,"user_tz":-300,"elapsed":65488,"user":{"displayName":"Alexandr Sobolev","userId":"06516004584152737867"}},"outputId":"cebb292c-066c-4d43-9763-982ffee870e0"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Ударить по голове или в живот?по голове\n","Вы нанесли 13 урона\n","Дракон нанес вам 1 урона\n","______\n","Броня - 99, Здоровье - 100\n","Здоровье дракона - 87\n","______\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-31-05da9835cf3b>\u001b[0m in \u001b[0;36m<cell line: 42>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0mdragon\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDragon\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Горыныч'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;32mwhile\u001b[0m \u001b[0mhero\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhealth\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m     \u001b[0mchoice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Ударить по голове или в живот?'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchoice\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'по голове'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m         \u001b[0mdamage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhero\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0matack_head\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":["class Book:\n","    is_borrowed = False\n","\n","\n","    def __init__(self, title, author, isbn):\n","        self.title = title\n","        self.author = author\n","        self.isbn = isbn\n","        self.is_borrowed = self.is_borrowed\n","\n","\n","class Library:\n","    books = 0\n","\n","    def __init__(self):\n","        self.book = self.books\n","\n","\n","    def add_book(self, book):\n","        self.books+= 1\n","        self.book = book\n","        return self.book\n","\n","\n"],"metadata":{"id":"GKKmdfN8GL6f","colab":{"base_uri":"https://localhost:8080/","height":220},"executionInfo":{"status":"error","timestamp":1732015235686,"user_tz":-300,"elapsed":291,"user":{"displayName":"Alexandr Sobolev","userId":"06516004584152737867"}},"outputId":"2a7d814d-a59e-4f08-a15e-4813d9d5d3cc"},"execution_count":36,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"Library.add_book() missing 1 required positional argument: 'book'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-36-66bf3ebedc4d>\u001b[0m in \u001b[0;36m<cell line: 26>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0mbook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Абоба'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Sobolev'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'qwerty'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m \u001b[0mbook_1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLibrary\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_book\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbook\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbook_1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Library.add_book() missing 1 required positional argument: 'book'"]}]}]}