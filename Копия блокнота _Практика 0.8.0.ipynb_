{"cells":[{"cell_type":"markdown","metadata":{"id":"ra45s33wUt-C"},"source":["# Задание 1"]},{"cell_type":"markdown","metadata":{"id":"G56D5mNCUwp5"},"source":["Задача: Создать чат бота для получения информации об исследованиях космоса\n","\n","Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:\n","\n","- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.\n","- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.\n","- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объекте, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.\n","- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.\n","Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.\n","\n","Требования:\n","- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.\n","- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.\n","- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.\n","- Представление данных: Представляйте данные в четкой и организованной форме.\n","- Опция выхода: позволяет пользователям выходить из приложения в любое время."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"wGeJM9n4UqUD","outputId":"9e83ca94-d896-4cb4-8816-0e09bdcf7744"},"outputs":[{"name":"stdout","output_type":"stream","text":["name - 2340 Hathor (1976 UA)\n","estimated_diameter_min  -  0.2180494405\n","estimated_diameter_max  -  0.4875733714\n","is hazardous? - True\n","_________________\n","name - 503941 (2003 UV11)\n","estimated_diameter_min  -  0.313729225\n","estimated_diameter_max  -  0.7015198735\n","is hazardous? - True\n","_________________\n","name - (2014 RB13)\n","estimated_diameter_min  -  0.4619074603\n","estimated_diameter_max  -  1.0328564805\n","is hazardous? - False\n","_________________\n","name - (2016 FC)\n","estimated_diameter_min  -  0.0127219879\n","estimated_diameter_max  -  0.0284472297\n","is hazardous? - False\n","_________________\n","name - (2019 UM10)\n","estimated_diameter_min  -  0.0183888672\n","estimated_diameter_max  -  0.0411187571\n","is hazardous? - False\n","_________________\n","name - (2022 UN2)\n","estimated_diameter_min  -  0.1350687798\n","estimated_diameter_max  -  0.3020229733\n","is hazardous? - False\n","_________________\n","name - (2023 VK2)\n","estimated_diameter_min  -  0.0380675544\n","estimated_diameter_max  -  0.0851216393\n","is hazardous? - False\n","_________________\n","name - (2024 KG1)\n","estimated_diameter_min  -  0.0584191154\n","estimated_diameter_max  -  0.1306291133\n","is hazardous? - False\n","_________________\n","name - (2024 UP5)\n","estimated_diameter_min  -  0.0210065618\n","estimated_diameter_max  -  0.0469721002\n","is hazardous? - False\n","_________________\n","name - (2024 UP7)\n","estimated_diameter_min  -  0.0562542031\n","estimated_diameter_max  -  0.1257882221\n","is hazardous? - False\n","_________________\n","name - (2024 UG11)\n","estimated_diameter_min  -  0.1464721231\n","estimated_diameter_max  -  0.327521624\n","is hazardous? - False\n","_________________\n","name - 144900 (2004 VG64)\n","estimated_diameter_min  -  0.5841911542\n","estimated_diameter_max  -  1.3062911326\n","is hazardous? - True\n","_________________\n","name - 474613 (2004 TL19)\n","estimated_diameter_min  -  0.1638909515\n","estimated_diameter_max  -  0.3664713084\n","is hazardous? - False\n","_________________\n","name - (2010 JR34)\n","estimated_diameter_min  -  0.0076657557\n","estimated_diameter_max  -  0.0171411509\n","is hazardous? - False\n","_________________\n","name - (2016 VA)\n","estimated_diameter_min  -  0.0080270317\n","estimated_diameter_max  -  0.0179489885\n","is hazardous? - False\n","_________________\n","name - (2017 QW17)\n","estimated_diameter_min  -  0.1260535197\n","estimated_diameter_max  -  0.2818642388\n","is hazardous? - True\n","_________________\n","name - (2019 FY2)\n","estimated_diameter_min  -  0.0088014652\n","estimated_diameter_max  -  0.0196806745\n","is hazardous? - False\n","_________________\n","name - (2020 HG2)\n","estimated_diameter_min  -  0.1010543415\n","estimated_diameter_max  -  0.2259643771\n","is hazardous? - False\n","_________________\n","name - (2021 PS70)\n","estimated_diameter_min  -  0.2412986969\n","estimated_diameter_max  -  0.5395602892\n","is hazardous? - False\n","_________________\n","name - (2022 CO3)\n","estimated_diameter_min  -  0.0191670368\n","estimated_diameter_max  -  0.0428587972\n","is hazardous? - False\n","_________________\n","name - (2022 KK1)\n","estimated_diameter_min  -  0.0705594158\n","estimated_diameter_max  -  0.1577756503\n","is hazardous? - False\n","_________________\n","name - (2024 RM2)\n","estimated_diameter_min  -  0.2231284644\n","estimated_diameter_max  -  0.4989304142\n","is hazardous? - False\n","_________________\n","name - (2024 UT5)\n","estimated_diameter_min  -  0.0056931808\n","estimated_diameter_max  -  0.0127303393\n","is hazardous? - False\n","_________________\n","name - (2024 UZ5)\n","estimated_diameter_min  -  0.0334622374\n","estimated_diameter_max  -  0.0748238376\n","is hazardous? - False\n","_________________\n","name - (2024 UL6)\n","estimated_diameter_min  -  0.0170433505\n","estimated_diameter_max  -  0.0381100904\n","is hazardous? - False\n","_________________\n","name - (2024 UO6)\n","estimated_diameter_min  -  0.1164541518\n","estimated_diameter_max  -  0.2603993997\n","is hazardous? - False\n","_________________\n","name - (2024 UU7)\n","estimated_diameter_min  -  0.0103027931\n","estimated_diameter_max  -  0.0230377456\n","is hazardous? - False\n","_________________\n","name - (2024 UD11)\n","estimated_diameter_min  -  0.0036404492\n","estimated_diameter_max  -  0.0081402919\n","is hazardous? - False\n","_________________\n","name - (2024 VF)\n","estimated_diameter_min  -  0.0092929794\n","estimated_diameter_max  -  0.0207797338\n","is hazardous? - False\n","_________________\n","name - (2024 VW)\n","estimated_diameter_min  -  0.0282979501\n","estimated_diameter_max  -  0.0632761401\n","is hazardous? - False\n","_________________\n","name - (2024 VD1)\n","estimated_diameter_min  -  0.0203495578\n","estimated_diameter_max  -  0.0455029946\n","is hazardous? - False\n","_________________\n","None\n"]}],"source":["import requests\n","import datetime as dt\n","\n","\n","def get_apod(api_key):\n","    result = {}\n","    url = 'https://api.nasa.gov/planetary/apod'\n","    parameters = {\n","        'api_key':api_key,\n","    }\n","    response = requests.get(url, params = parameters)\n","    json = response.json()\n","    for k, v in json.items():\n","        if k == 'hdurl':\n","            result['Астрономическая картинка дня'] = v\n","        elif k == 'explanation':\n","            result['Пояснение'] = v\n","\n","    return result\n","\n","\n","def get_mars_rover(rover, camera, earth_date, sol = 1000):\n","    url = f'https://api.nasa.gov/mars-photos/api/v1/rovers/{rover}/photos'\n","    parameters = {\n","        'sol':sol,\n","        'camera':camera,\n","        'earth_date': earth_date,\n","        'api_key':api_key\n","    }\n","    response = requests.get(url, params = parameters)\n","    answer = response.json()\n","    for k, v in answer.items():\n","        for i in v:\n","            for key, value in i.items():\n","                if key == 'img_src':\n","                    print(value)\n","\n","\n","def get_asteroid(start_date, end_date, api_key = 'DEMO_KEY'):\n","    url = 'https://api.nasa.gov/neo/rest/v1/feed'\n","    parameters = {\n","        'start_date':start_date,\n","        'end_date' : end_date,\n","        'api_key' : api_key\n","    }\n","    response = requests.get(url, params = parameters)\n","    json = response.json()\n","    for k, v in json.items():\n","        if k == 'near_earth_objects':\n","            for key, value in v.items():\n","                for i in value:\n","                  for qwe, ewq in i.items():\n","                      if qwe == 'name':\n","                          print(qwe, '-', ewq)\n","                      elif qwe == 'is_potentially_hazardous_asteroid':\n","                          print('is hazardous? -', ewq)\n","                          print('_________________')\n","                      elif qwe == 'estimated_diameter':\n","                          for ke, val in ewq.items():\n","                              if ke == 'kilometers':\n","                                  for qwer, rewq in val.items():\n","                                      if qwer == 'estimated_diameter_min':\n","                                          print(qwer, ' - ', rewq)\n","                                      elif qwer == 'estimated_diameter_max':\n","                                          print(qwer, ' - ', rewq)\n","\n","\n","api_key = 'IZ4hlqcWMu1vf99ZRt9C8af8GA0JMaKM80JKQKeh'\n","continued = True\n","while continued == True:\n","    mode = int(input('Введите режим 1, 2, 3, 4 - '))\n","    if mode == 1:\n","        print(get_apod(api_key))\n","    elif mode == 2:\n","        try:\n","            rover = str(input(\"Выберите марсоход (curiosity, opportunity, spirit) - \"))\n","            camera = str(input('Выберите камеру (fhaz, rhaz, mast, chemcam) - '))\n","            earth_date = dt.datetime.strptime(input('Введите дату через тире (yyyy-mm-dd) - '), '%Y-%m-%d')\n","            if rover == 'curiosity':\n","                print(get_mars_rover(rover, camera, earth_date, api_key))\n","            elif rover == 'opportunity':\n","                print(get_mars_rover(rover, camera, earth_date, api_key))\n","            elif rover == 'spirit':\n","                print(get_mars_rover(rover, camera, earth_date, api_key))\n","            else:\n","                print('Нет таких камер')\n","        except:\n","            print('Неверный ввод даты')\n","    elif mode == 3:\n","        try:\n","            start_date = input('Введите начальную дату через тире (yyyy-mm-dd) - ')\n","            start_date = dt.datetime.strptime(start_date, '%Y-%m-%d')\n","            end_date = input('Введите конечную дату через тире (yyyy-mm-dd) - ')\n","            end_date = dt.datetime.strptime(end_date, '%Y-%m-%d')\n","            print(get_asteroid(start_date, end_date, api_key))\n","        except:\n","            print('Неверный ввод даты')\n","    elif mode == 4:\n","        ...\n","    else:\n","        continued = False"]},{"cell_type":"markdown","metadata":{"id":"ia9UtA0cU1Iy"},"source":["# Задание 2"]},{"cell_type":"markdown","metadata":{"id":"Ofu_GmqrU1Iy"},"source":["Описание задачи\n","\n","Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:\n","\n","Требования:\n","Извлекать произведения искусства:\n","\n","- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.\n","Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.\n","Фильтровать произведения искусства:\n","\n","- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).\n","Отображать подробную информацию об оформлении:\n","\n","- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.\n","После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.\n","Разбивка на страницы и взаимодействие с пользователем:\n","\n","- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.\n","\n","Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.\n","\n","Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjUH1GznU1Iy"},"outputs":[],"source":["import requests\n","\n","\n","def first_task(page):\n","    url = 'https://api.artic.edu/api/v1/artworks'\n","    parameters = {\n","        'page': page\n","    }\n","    response = requests.get(url, params = parameters)\n","    answer = response.json()\n","    for k, v in answer.items():\n","        if k == 'data':\n","            for i in v:\n","                print('id:', i['id'])\n","                print('title', i['title'])\n","                print('date:', i['date_display'])\n","                print('artist:', i['artist_display'])\n","                print('description:', i['description'])\n","                print('________')\n","\n","\n","def second_task(name):\n","    url = 'https://api.artic.edu/api/v1/artworks'\n","    parameters = {\n","        'artist': name\n","    }\n","    response = requests.get(url, params=parameters)\n","    answer = response.json()\n","    for k, v in answer.items():\n","        if k == 'data':\n","            for i in v:\n","                print('id:', i['id'])\n","                print('title', i['title'])\n","                print('date:', i['date_display'])\n","                print('artist:', i['artist_display'])\n","                print('description:', i['description'])\n","                print('____________')\n","\n","\n","def third_task(id):\n","    url = 'https://api.artic.edu/api/v1/artworks'\n","    response = requests.get(url)\n","    answer = response.json()\n","    for k, v in answer.items():\n","        if k == 'data':\n","            for i in v:\n","                if i['id'] == id:\n","                    print('id:', i['id'])\n","                    print('title', i['title'])\n","                    print('date:', i['date_display'])\n","                    print('artist:', i['artist_display'])\n","                    print('description:', i['description'])\n","\n","\n","continued = True\n","while continued == True:\n","    mode = int(input('Введите режим 1, 2, 3 - '))\n","    if mode == 1:\n","        page = int(input('Введите номер страницы: '))\n","        first_task(page)\n","    elif mode == 2:\n","        name = str(input('Введите имя художника: '))\n","        second_task(name)\n","    elif mode == 3:\n","        continued_2 = True\n","        while continued_2 == True:\n","            title = int(input('Выберите работу '\n","                              '(1.Rumble, from Brawling Spitfire Wrestling Series, '\n","                              '2.Ceremonial Hanging (palepai)), '\n","                              '3.Jelayah (Overcoat Dress): '))\n","            if title == 1:\n","                id = 191505\n","                third_task(id)\n","            elif title == 2:\n","                id = 180305\n","                third_task(id)\n","            elif title == 3:\n","                id = 59607\n","                third_task(id)\n","            else:\n","                continued_2 = False\n","    else:\n","        continued = False"]},{"cell_type":"markdown","metadata":{"id":"eecUb-akU1ji"},"source":["# Задание 3"]},{"cell_type":"markdown","metadata":{"id":"jsK7IKptU1ji"},"source":["Задача: Создать программу по управлению портфелем криптовалют\n","\n","Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.\n","\n","Требования:\n","Получение текущих цен на криптовалюты:\n","\n","Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.\n","\n","Управление портфелем:\n","\n","- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.\n","- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).\n","\n","Отслеживание изменения цен:\n","\n","- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.\n","- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.\n","\n","Поиск исторических данных о ценах:\n","\n","- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.\n","- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).\n","\n","Взаимодействие с пользователем:\n","\n","- Реализуйте интерфейс командной строки для ввода данных пользователем.\n","- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_0DToTqlvywa"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"QGrsZrv5U1s8"},"source":["# Дополнительно: Задание 4"]},{"cell_type":"markdown","metadata":{"id":"qs_XITmYU1s8"},"source":["Задание 4: Проектное\n","\n","Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!\n","\n","\n","Критерии приемки результата:\n","\n","- Проект включает в себя не менее 5 возможостей для пользователя\n","- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку\n","- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)\n","- Проект должен обязательно включать в себя ряд используемых конструкции:\n","    - Функции\n","    - Условные конструкции\n","    - Ввод/вывод\n","    - Словари/Списки\n","- Допускается использование библиотек:\n","    - requests\n","    - datetime\n","    - random"]},{"cell_type":"markdown","metadata":{"id":"VKXhaJi4FL0B"},"source":["**Здесь добавьте описание вашего проекта**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wiA55k1KU1s8"},"outputs":[],"source":["#  А здесь код"]}],"metadata":{"colab":{"collapsed_sections":["ra45s33wUt-C","ia9UtA0cU1Iy","eecUb-akU1ji","QGrsZrv5U1s8"],"provenance":[{"file_id":"17IcY1UTGzZMUteC1w_OLi1DXlUbhQRJu","timestamp":1730803338086}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}